import numpy as np

# Intento de importar CuPy para c√°lculos en GPU
try:
    import cupy as cp
    # Verificar que CuPy puede crear arrays y ejecutar operaciones b√°sicas
    test_array = cp.array([1, 2, 3])
    _ = test_array + 1  # Test de operaci√≥n b√°sica
    _ = cp.ones(3)      # Test de creaci√≥n de arrays
    GPU_AVAILABLE = True
    print("‚úÖ CuPy disponible: se pueden usar c√°lculos en GPU")
except ImportError:
    cp = None
    GPU_AVAILABLE = False
    print("‚ùå CuPy no instalado: solo c√°lculos en CPU")
    print("üí° Instale CuPy con: pip install cupy-cuda12x")
except Exception as e:
    cp = None
    GPU_AVAILABLE = False
    error_msg = str(e)
    if "libnvrtc" in error_msg:
        print("‚ùå CuPy instalado pero faltan librer√≠as CUDA")
        print("üí° Instale CUDA Toolkit completo o use modo CPU")
        print("üí° Alternativa: ejecute en Google Colab o entorno con CUDA completo")
    else:
        print(f"‚ùå CuPy instalado pero no funcional: {error_msg}")
    print("üîÑ Usando solo c√°lculos en CPU")

def crear_matriz_probabilidad(n, p):
    """
    Crea una matriz de probabilidad para una cadena de Markov donde:
    - n: n√∫mero de estados
    - Estados intermedios: probabilidad p de ir al siguiente, 1-p de volver al anterior
    - Estado inicial: probabilidad p de avanzar, 1-p de quedarse
    - Estado final: probabilidad p de quedarse, 1-p de retroceder

    Returns:
        numpy.ndarray: Matriz de probabilidad n x n
    """
    if not 0 <= p <= 1:
        raise ValueError("p debe estar entre 0 y 1")
    if n <= 0:
        raise ValueError("n debe ser mayor que 0")

    # Crear matriz de ceros
    matriz = np.zeros((n, n))

    # Para estados intermedios (1 a n-2):
    # - Probabilidad p de ir al siguiente estado
    # - Probabilidad 1-p de volver al estado anterior
    for i in range(1, n-1):
        matriz[i, i+1] = p      # siguiente estado
        matriz[i, i-1] = 1-p    # estado anterior

    # Estado inicial (0): probabilidad p de avanzar, 1-p de quedarse
    if n > 1:
        matriz[0, 0] = 1-p      # quedarse en el estado inicial
        matriz[0, 1] = p        # avanzar al siguiente estado

    # Estado final (n-1): probabilidad p de quedarse, 1-p de retroceder
    if n > 1:
        matriz[n-1, n-1] = p        # quedarse en el estado final
        matriz[n-1, n-2] = 1-p      # retroceder al estado anterior

    return matriz

def calcular_distribucion_metodo_autovalores(matriz):
    """
    Calcula la distribuci√≥n estacionaria usando vectores propios (M√©todo 1).
    
    Resuelve œÄP = œÄ, donde œÄ es la distribuci√≥n estacionaria.
    Para esto, calculamos el vector propio izquierdo de P asociado al valor propio 1,
    que es equivalente al vector propio derecho de P^T.
    
    Args:
        matriz: numpy.ndarray - Matriz de transici√≥n P
    
    Returns:
        numpy.ndarray: Distribuci√≥n estacionaria œÄ normalizada
    """
    # Para œÄP = œÄ, necesitamos el vector propio izquierdo de P
    # Esto equivale al vector propio derecho de P^T
    valores_propios, vectores_propios = np.linalg.eig(matriz.T)
    
    # Buscar el valor propio m√°s cercano a 1
    indice_1 = np.argmin(np.abs(valores_propios - 1.0))
    
    # Obtener el vector propio correspondiente
    pi = vectores_propios[:, indice_1]
    
    # Tomar valores reales (ignorar parte imaginaria por errores num√©ricos)
    pi = np.real(pi)
    
    # Normalizar para que sume 1 y sea positivo
    pi = np.abs(pi)
    pi = pi / np.sum(pi)
    
    return pi

def calcular_distribucion_metodo_tiempo_retorno(matriz):
    """
    Calcula la distribuci√≥n estacionaria usando tiempos medios de retorno (M√©todo 2).

    Utiliza el teorema fundamental: œÄ·µ¢ = 1/E[T·µ¢], donde E[T·µ¢] es el tiempo
    esperado de retorno al estado i.

    Para calcular E[T·µ¢], resolvemos el sistema:
    - m·µ¢‚±º = 1 + Œ£‚Çñ‚â†·µ¢ p‚±º‚Çñ * m·µ¢‚Çñ para j ‚â† i
    - m·µ¢·µ¢ = 1

    Args:
        matriz: numpy.ndarray - Matriz de transici√≥n P

    Returns:
        numpy.ndarray: Distribuci√≥n estacionaria œÄ calculada con tiempos de retorno
    """
    n = matriz.shape[0]
    tiempos_retorno = np.zeros(n)

    # Para cada estado i, calcular el tiempo medio de retorno E[T·µ¢]
    for i in range(n):
        # Construir el sistema para calcular los tiempos medios de primera pasada
        # m·µ¢‚±º = tiempo esperado para llegar a i desde j
        A = np.eye(n) - matriz.copy()

        # Para el estado destino i: m·µ¢·µ¢ = 0 (ya estamos ah√≠)
        A[i, :] = 0
        A[i, i] = 1

        # Vector b: 1 para todos los estados excepto el destino
        b = np.ones(n)
        b[i] = 0

        # Resolver el sistema Am = b
        m = np.linalg.solve(A, b)

        # El tiempo medio de retorno desde i es 1 + m·µ¢‚±º * p·µ¢‚±º sumado sobre j‚â†i
        # Pero por la estructura del problema, E[T·µ¢] = 1 + Œ£‚±º‚â†·µ¢ p·µ¢‚±º * m‚±º
        tiempo_retorno = 1.0
        for j in range(n):
            if j != i:
                tiempo_retorno += matriz[i, j] * m[j]

        tiempos_retorno[i] = tiempo_retorno

    # Calcular la distribuci√≥n estacionaria: œÄ·µ¢ = 1/E[T·µ¢]
    pi = 1.0 / tiempos_retorno

    # Normalizar para que sume 1
    pi = pi / np.sum(pi)

    return pi

def calcular_distribucion_metodo_autovalores_gpu(matriz):
    """
    Versi√≥n GPU del M√©todo 1: Vectores propios usando CuPy + iteraci√≥n de potencias.

    Args:
        matriz: numpy.ndarray - Matriz de transici√≥n P

    Returns:
        numpy.ndarray: Distribuci√≥n estacionaria œÄ (devuelta a CPU)
    """
    if not GPU_AVAILABLE:
        raise RuntimeError("CuPy no est√° disponible. Use la versi√≥n CPU.")

    # Nota: CuPy no tiene cp.linalg.eig, solo eigh para matrices sim√©tricas
    # Usamos el m√©todo de potencias para encontrar el vector propio dominante

    # Transferir matriz a GPU
    P = cp.array(matriz)
    n = P.shape[0]

    # Vector inicial aleatorio
    pi = cp.ones(n, dtype=cp.float64) / n

    # M√©todo de potencias: œÄ = œÄ * P^T
    # Como œÄP = œÄ, entonces œÄ * P^T = œÄ
    PT = P.T

    # Iterar hasta convergencia
    for _ in range(1000):  # m√°ximo 1000 iteraciones
        pi_nuevo = pi @ PT
        pi_nuevo = pi_nuevo / cp.sum(pi_nuevo)

        # Verificar convergencia
        if cp.max(cp.abs(pi_nuevo - pi)) < 1e-12:
            break

        pi = pi_nuevo

    # Asegurar que todos los valores sean positivos
    pi = cp.abs(pi)
    pi = pi / cp.sum(pi)

    # Devolver resultado a CPU
    return cp.asnumpy(pi)

def calcular_distribucion_metodo_tiempo_retorno_gpu(matriz):
    """
    Versi√≥n GPU del M√©todo 2: Tiempo medio de retorno usando CuPy.

    Args:
        matriz: numpy.ndarray - Matriz de transici√≥n P

    Returns:
        numpy.ndarray: Distribuci√≥n estacionaria œÄ (devuelta a CPU)
    """
    if not GPU_AVAILABLE:
        raise RuntimeError("CuPy no est√° disponible. Use la versi√≥n CPU.")

    # Transferir matriz a GPU
    matriz_gpu = cp.array(matriz)
    n = matriz_gpu.shape[0]
    tiempos_retorno = cp.zeros(n)

    # Para cada estado i, calcular el tiempo medio de retorno E[T·µ¢]
    for i in range(n):
        # Construir el sistema en GPU
        A = cp.eye(n) - matriz_gpu.copy()
        A[i, :] = 0
        A[i, i] = 1

        b = cp.ones(n)
        b[i] = 0

        # Resolver sistema lineal en GPU
        m = cp.linalg.solve(A, b)

        # Calcular tiempo de retorno
        tiempo_retorno = 1.0
        for j in range(n):
            if j != i:
                tiempo_retorno += matriz_gpu[i, j] * m[j]

        tiempos_retorno[i] = tiempo_retorno

    # Calcular distribuci√≥n estacionaria
    pi = 1.0 / tiempos_retorno
    pi = pi / cp.sum(pi)

    # Devolver resultado a CPU
    return cp.asnumpy(pi)

def crear_matriz_probabilidad_gpu(n, p):
    """
    Versi√≥n GPU de crear_matriz_probabilidad usando CuPy.

    Args:
        n: n√∫mero de estados
        p: probabilidad de avance

    Returns:
        cupy.ndarray: Matriz de probabilidad en GPU
    """
    if not GPU_AVAILABLE:
        raise RuntimeError("CuPy no est√° disponible. Use la versi√≥n CPU.")

    # Crear matriz de ceros en GPU
    matriz = cp.zeros((n, n))

    # Estados intermedios
    for i in range(1, n-1):
        matriz[i, i+1] = p
        matriz[i, i-1] = 1-p

    # Estado inicial
    if n > 1:
        matriz[0, 0] = 1-p
        matriz[0, 1] = p

    # Estado final
    if n > 1:
        matriz[n-1, n-1] = p
        matriz[n-1, n-2] = 1-p

    return matriz
